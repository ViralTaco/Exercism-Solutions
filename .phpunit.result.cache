C:37:"PHPUnit\Runner\DefaultTestResultCache":5827:{a:2:{s:7:"defects";a:36:{s:77:"HammingComparatorTest::testCompleteHammingDistanceOfForSingleNucleotideStrand";i:4;s:64:"HammingComparatorTest::testCompleteHammingDistanceForSmallStrand";i:4;s:47:"HammingComparatorTest::testSmallHammingDistance";i:4;s:61:"HammingComparatorTest::testSmallHammingDistanceInLongerStrand";i:4;s:47:"HammingComparatorTest::testLargeHammingDistance";i:4;s:58:"HammingComparatorTest::testHammingDistanceInVeryLongStrand";i:4;s:71:"HammingComparatorTest::testExceptionThrownWhenStrandsAreDifferentLength";i:4;s:62:"HammingComparatorTest::testNoDifferenceBetweenIdenticalStrands";i:4;s:39:"AnagramTest::testDetectsUnicodeAnagrams";i:1;s:52:"AnagramTest::testEliminatesMisleadingUnicodeAnagrams";i:1;s:29:"TrinaryTest::test10IsDecimal3";i:3;s:29:"TrinaryTest::test11IsDecimal4";i:3;s:30:"TrinaryTest::test100IsDecimal9";i:3;s:31:"TrinaryTest::test112IsDecimal14";i:3;s:31:"TrinaryTest::test222IsDecimal26";i:3;s:41:"TrinaryTest::test1122000120IsDecimal32091";i:3;s:41:"TrinaryTest::testInvalidTrinaryIsDecimal0";i:3;s:28:"TrinaryTest::test1IsDecimal1";i:3;s:28:"TrinaryTest::test2IsDecimal2";i:3;s:30:"BinaryTest::testItParsesDigits";i:3;s:32:"BinaryTest::testItParsesHundreds";i:3;s:30:"BinaryTest::testItParsesMaxInt";i:3;s:46:"BinaryTest::testItParsesValuesWithLeadingZeros";i:3;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #2";i:4;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #3";i:4;s:41:"BinaryTest::testItParsesBinary0ToDecimal0";i:4;s:41:"BinaryTest::testItParsesBinary1ToDecimal1";i:4;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #0";i:3;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #1";i:3;s:41:"GigasecondTest::testFrom with data set #0";i:3;s:41:"GigasecondTest::testFrom with data set #1";i:3;s:41:"GigasecondTest::testFrom with data set #2";i:3;s:41:"GigasecondTest::testFrom with data set #3";i:3;s:41:"GigasecondTest::testFrom with data set #4";i:3;s:24:"GigasecondTest::testFrom";i:4;s:34:"GigasecondTest::testFromReturnType";i:1;}s:5:"times";a:65:{s:30:"HelloWorldTest::testHelloWorld";d:0;s:62:"HammingComparatorTest::testNoDifferenceBetweenIdenticalStrands";d:0;s:77:"HammingComparatorTest::testCompleteHammingDistanceOfForSingleNucleotideStrand";d:0;s:64:"HammingComparatorTest::testCompleteHammingDistanceForSmallStrand";d:0;s:47:"HammingComparatorTest::testSmallHammingDistance";d:0;s:61:"HammingComparatorTest::testSmallHammingDistanceInLongerStrand";d:0;s:47:"HammingComparatorTest::testLargeHammingDistance";d:0;s:58:"HammingComparatorTest::testHammingDistanceInVeryLongStrand";d:0;s:71:"HammingComparatorTest::testExceptionThrownWhenStrandsAreDifferentLength";d:0;s:22:"YearTest::testLeapYear";d:0;s:25:"YearTest::testNonLeapYear";d:0;s:29:"YearTest::testNonLeapEvenYear";d:0;s:21:"YearTest::testCentury";d:0;s:27:"YearTest::testFourthCentury";d:0;s:26:"AnagramTest::testNoMatches";d:0;s:37:"AnagramTest::testDetectsSimpleAnagram";d:0;s:44:"AnagramTest::testDoesNotDetectFalsePositives";d:0;s:40:"AnagramTest::testDetectsMultipleAnagrams";d:0;s:44:"AnagramTest::testDoesNotDetectAnagramSubsets";d:0;s:31:"AnagramTest::testDetectsAnagram";d:0;s:41:"AnagramTest::testDetectsMultipleAnagrams2";d:0;s:44:"AnagramTest::testDoesNotDetectIdenticalWords";d:0;s:62:"AnagramTest::testDoesNotDetectNonAnagramsWithIdenticalChecksum";d:0;s:49:"AnagramTest::testDetectsAnagramsCaseInsensitively";d:0;s:59:"AnagramTest::testDetectsAnagramsUsingCaseInsensitiveSubject";d:0;s:66:"AnagramTest::testDetectsAnagramsUsingCaseInsensitvePossibleMatches";d:0;s:50:"AnagramTest::testDoesNotDetectAWordAsItsOwnAnagram";d:0;s:65:"AnagramTest::testDoesNotDetectAAnagramIfTheOriginalWordIsRepeated";d:0;s:53:"AnagramTest::testAnagramsMustUseAllLettersExactlyOnce";d:0;s:54:"AnagramTest::testEliminatesAnagramsWithTheSameChecksum";d:0;s:39:"AnagramTest::testDetectsUnicodeAnagrams";d:0;s:52:"AnagramTest::testEliminatesMisleadingUnicodeAnagrams";d:0;s:43:"AnagramTest::testCapitalWordIsNotOwnAnagram";d:0;s:54:"AnagramTest::testAnagramsMustUseAllLettersExactlyOnce2";d:0;s:28:"TrinaryTest::test1IsDecimal1";d:0;s:28:"TrinaryTest::test2IsDecimal2";d:0;s:29:"TrinaryTest::test10IsDecimal3";d:0;s:29:"TrinaryTest::test11IsDecimal4";d:0;s:30:"TrinaryTest::test100IsDecimal9";d:0;s:31:"TrinaryTest::test112IsDecimal14";d:0;s:31:"TrinaryTest::test222IsDecimal26";d:0;s:41:"TrinaryTest::test1122000120IsDecimal32091";d:0;s:41:"TrinaryTest::testInvalidTrinaryIsDecimal0";d:0;s:41:"BinaryTest::testItParsesBinary0ToDecimal0";d:0;s:41:"BinaryTest::testItParsesBinary1ToDecimal1";d:0;s:30:"BinaryTest::testItParsesDigits";d:0;s:32:"BinaryTest::testItParsesHundreds";d:0;s:30:"BinaryTest::testItParsesMaxInt";d:0;s:46:"BinaryTest::testItParsesValuesWithLeadingZeros";d:0;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #0";d:0;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #1";d:0;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #2";d:0;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #3";d:0;s:41:"GigasecondTest::testFrom with data set #0";d:0;s:41:"GigasecondTest::testFrom with data set #1";d:0;s:41:"GigasecondTest::testFrom with data set #2";d:0;s:41:"GigasecondTest::testFrom with data set #3";d:0;s:41:"GigasecondTest::testFrom with data set #4";d:0;s:51:"GigasecondTest::testFromReturnType with data set #0";d:0;s:51:"GigasecondTest::testFromReturnType with data set #1";d:0;s:51:"GigasecondTest::testFromReturnType with data set #2";d:0;s:51:"GigasecondTest::testFromReturnType with data set #3";d:0;s:51:"GigasecondTest::testFromReturnType with data set #4";d:0;s:24:"GigasecondTest::testFrom";d:0;s:34:"GigasecondTest::testFromReturnType";d:0;}}}